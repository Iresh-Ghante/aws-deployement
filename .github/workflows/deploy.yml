# A descriptive name for your workflow
name: Deploy Spring Boot App to AWS EC2

# This section defines the trigger for the workflow.
# 'on: push: branches: [ "main" ]' means this workflow runs every time
# a commit is pushed to the 'main' branch.
on:
  push:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # We define a single job named 'build-and-deploy'
  build-and-deploy:
    # The type of virtual machine to run the job on. 'ubuntu-latest' is a standard choice.
    runs-on: ubuntu-latest

    # A job is a sequence of steps
    steps:
      # Step 1: Checkout the repository's code
      # This action downloads your code onto the runner, allowing the job to access it.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up the Java Development Kit (JDK)
      # This action installs Java 17, which is needed to build the Spring Boot application.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Build the application using Maven
      # This runs the 'mvn clean package' command, which compiles the code,
      # runs tests, and packages the application into an executable JAR file.
      # The resulting JAR is typically found in the 'target/' directory.
      - name: Build with Maven
        run: mvn clean package

      # Step 4: Securely copy the JAR file to the EC2 instance
      # This uses a community action 'appleboy/scp-action' to perform a Secure Copy (SCP).
      - name: SCP JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_HOST }}           # The IP address of your EC2 instance from GitHub Secrets
          username: ${{ secrets.AWS_USERNAME }}   # The username for your EC2 instance from GitHub Secrets
          key: ${{ secrets.AWS_PRIVATE_KEY }}     # The private SSH key from GitHub Secrets
          port: 22                               # The SSH port
          source: "target/*.jar"                 # The path to the file to copy (our built JAR)
          target: "~/app"                       # The destination directory on the EC2 instance

      # Step 5: Execute the deployment script on the EC2 instance
      # This uses another community action 'appleboy/ssh-action' to run commands on a remote server.
      - name: Run deployment script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: 22
          # The command to execute on the remote server, which is our deployment script.
          script: "sh ~/app/deploy.sh"